//All strings are UTF-8.

String. "NONS". (magic word)
Word. Version.
5*DWord. Hash of the generating script. (loading will fail if it doesn't match)
DWord. Start of the stack section.
DWord. Start of the variables section.
DWord. Start of the screen section.
DWord. Start of the audio section.
Stack section{
	DWord. Size of the stack (n).
	n*Stack element{
		Byte. Type of nest. (0 subroutine, 1 for)
		String. Label.
		DWord. Offset in wide characters from the label.
		if (!Type of nest){
			String. A string that must be interpreted before popping the stack.
		}else{
			DWord. A variable stack index used to identify the for index variable.
			sDWord. The final value of the for (for (;var<=val;)).
			sDWord. The step of the for (for (;;var+=step)).
		}
	}
	String. Current label.
	DWord. Offset in wide characters from the label.
}
Variables section{
	DWord. Number of intervals (n).
	n*Interval{
		if (Size of the interval==1)
			DWord. (First variable in the interval)&0x80000000.
		else{
			DWord. First variable in the interval.
			DWord. Size of the interval.
		}
	}
	Variable{
		//Stack position is determined by interval.
		sDWord. intValue.
		String. wcsValue.
	}
	DWord. Number of arrays (n).
	n*Array{
		String. Name.
		*0
		DWord. Size of dimension (n2).
		if (n2){
			n2*Variable{
				sDWord. intValue.
				String. wcsValue.
				<recursion from *0 to *1>
			}
		}
		*1
	}
}
Screen section{
	DWord. Start of the window subsection.
	DWord. Start of the graphic subsection.
	Window subsection{
		sWord. Window x.
		sWord. Window y.
		sWord. Window w.
		sWord. Window h.
		sWord. Frame x.
		sWord. Frame y.
		sWord. Frame w.
		sWord. Frame h.
		Byte. Window shade R.
		Byte. Window shade G.
		Byte. Window shade B.
		DWord. Transition.
		DWord. Transition duration.
		String. Transition rule.
		Byte. Hide window during effect?
		Word. Font size.
		Byte. Font color R.
		Byte. Font color G.
		Byte. Font color B.
		DWord. Text speed.
		Byte. Shadow?
		Word. Font spacing.
		sWord. Font line skip (-1 is native).
		DWord. Size of log (n).
		n*String. Log pages.
		String. Current text buffer.
		Word. Current text x.
		Word. Current text y.
		String. Arrow cursor.
		Byte. Arrow cursor absolute?
		sWord. Arrow cursor x.
		sWord. Arrow cursor y.
		String. Page cursor.
		Byte. Page cursor absolute?
		sWord. Page cursor x.
		sWord. Page cursor y.
		Byte. Right click mode.
	}
	Graphic subsection{
		String. Backgound.
		if (!Background){
			Byte. Background color R.
			Byte. Background color G.
			Byte. Background color B.
		}
		String. Left character.
		String. Center character.
		String. Right character.
		DWord. Number of intervals (n).
		n*Interval{
			if (Size of the interval==1)
				DWord. (First variable in the interval)&0x80000000.
			else{
				DWord. First variable in the interval.
				DWord. Size of the interval.
			}
		}
		Sprite{
			//Sprite no. is determined by interval.
			String. Sprite.
			sDWord. X.
			sDWord. Y.
			Byte. Visible?
			Byte. Alpha.
		}
		DWord. Sprite priority.
		Byte. Monochrome?
		Byte. Monochrome R.
		Byte. Monochrome G.
		Byte. Monochrome B.
		Byte. Negative?
	}
}
Audio section{
	sByte. Track.
	if (Track<0){
		String. File name.
	}
	sByte. Music volume|(Loop music?0:0x80).
	Word. Total channels (n).
	n*Channel{
		String. File name.
		sByte. Channel volume|(Loop?0:0x80).
	}
}